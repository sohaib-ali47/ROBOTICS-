#include <SoftwareSerial.h>

// Motor control pins
#define ENA 3
#define IN1 4
#define IN2 5
#define IN3 6
#define IN4 7
#define ENB 9

// HC-05 on pins 10 (RX), 11 (TX)
SoftwareSerial BT(10, 11);
char command;

void setup() {
  Serial.begin(9600);
  BT.begin(9600);

  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);

  stopMotors();
  Serial.println("RC Car Ready â€“ Waiting for Bluetooth commands...");
}

void loop() {
  if (BT.available()) {
    char c = BT.read();

    // Ignore CR/LF characters (causes delay)
    if (c == '\r' || c == '\n') return;

    command = c;
    Serial.print("Command: ");
    Serial.println(command);

    switch (command) {
      case 'F': forward();        break;
      case 'B': backward();       break;
      case 'L': rotateLeft();     break;
      case 'R': rotateRight();    break;
      case 'S': stopMotors();     break;
      default:  stopMotors();     break; // Unknown = stop (safety)
    }

    // Optional: Clear input buffer fast
    while (BT.available()) BT.read();
  }
}

// === Movement Functions ===

void forward() {
  setMotors(HIGH, LOW, HIGH, LOW, 200, 200);
}

void backward() {
  setMotors(LOW, HIGH, LOW, HIGH, 200, 200);
}

void rotateLeft() {
  setMotors(HIGH, LOW, LOW, HIGH, 200, 200);
}

void rotateRight() {
  setMotors(LOW, HIGH, HIGH, LOW, 200, 200);
}

void stopMotors() {
  setMotors(LOW, LOW, LOW, LOW, 0, 0);
}

void setMotors(bool in1, bool in2, bool in3, bool in4, int speedA, int speedB) {
  digitalWrite(IN1, in1);
  digitalWrite(IN2, in2);
  digitalWrite(IN3, in3);
  digitalWrite(IN4, in4);
  analogWrite(ENA, speedA);
  analogWrite(ENB, speedB);
}
